pipeline {
    agent any

    environment {
        IMAGE_NAME = "alejofl/secret-notes"
        VITE_API_BASE_URL = credentials('VITE_API_BASE_URL')
        VITE_PUBLIC_POSTHOG_KEY = credentials('VITE_PUBLIC_POSTHOG_KEY')
        VITE_PUBLIC_POSTHOG_HOST = credentials('VITE_PUBLIC_POSTHOG_HOST')
    }

    tools {
        nodejs "node-22"
    }

    stages {
        stage('Preparation') {
            steps {
                checkout scm
                script {
                    def app_version = sh(
                        script: "grep '\"version\"' package.json | sed 's/.*\"version\": \"\\(.*\\)\".*/\\1/'",
                        returnStdout: true
                    ).trim()
                }
                echo "App Version: ${app_version}"
            }
        }

        stage('Linting') {
            parallel {
                stage('Static Code Analysis (SonarQube)') {
                    steps {
                        script {
                            def scanner_home = tool 'SonarScanner';
                            withSonarQubeEnv('SonarScanner') {
                                sh "${scanner_home}/bin/sonar-scanner"
                            }
                        }
                    }
                }
                stage('Security Scan (Snyk)') {
                    steps {
                        snykSecurity(
                            snykInstallation: 'SnykScanner',
                            snykTokenId: 'snyk-token',
                        )
                    }
                }
            }
        }

        stage('Unit Testing') {
            parallel {
                stage('Backend Unit Testing') {
                    steps {
                       sh 'cd backend && npm install && npm run test && cd ..'
                    }
                }
                stage('Frontend Unit Testing') {
                    steps {
                       sh 'cd frontend && npm install && npm run test && cd ..'
                    }
                }
            }
        }

        stage('Build') {
            parallel {
                stage('Frontend Build') {
                    steps {
                        script {
                            def build_args = [
                                "VITE_API_BASE_URL=${env.VITE_API_BASE_URL}",
                                "VITE_PUBLIC_POSTHOG_KEY=${env.VITE_PUBLIC_POSTHOG_KEY}",
                                "VITE_PUBLIC_POSTHOG_HOST=${env.VITE_PUBLIC_POSTHOG_HOST}",
                            ]
                            def frontend_image = docker.build("${env.IMAGE_NAME}-frontend:latest", "--build-arg ${build_args.join(' --build-arg ')} frontend")
                        }
                    }
                }
                stage('Backend Build') {
                    steps {
                        script {
                            def backend_image = docker.build("${env.IMAGE_NAME}-backend:latest", "backend")
                        }
                    }
                }
            }
        }

        stage('Delivery') {
            parallel {
                stage('Frontend Delivery') {
                    steps {
                        script {
                            frontend_image.push("${app_version}")
                            frontend_image.push("latest")
                        }
                    }
                }
                stage('Backend Delivery') {
                    steps {
                        script {
                            backend_image.push("${app_version}")
                            backend_image.push("latest")
                        }
                    }
                }
            }
        }
    }
}