name: Secret Notes - Test, Build, Deploy

on:
  push:
    branches: [ master, deploy ]

env:
  IMAGE_NAME: alejofl/secret-notes
  NODE_VERSION: '22'

jobs:
  preparation:
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract version
        id: version
        run: |
          VERSION=$(grep '"version"' package.json | sed 's/.*"version": "\(.*\)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "App Version: $VERSION"

  sonarqube:
    runs-on: ubuntu-latest
    needs: preparation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis
      
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  snyk:
    runs-on: ubuntu-latest
    needs: preparation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  backend-unit-testing:
    runs-on: ubuntu-latest
    needs: [sonarqube, snyk]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies and run tests
        run: |
          cd backend
          npm install
          npm run test

  frontend-unit-testing:
    runs-on: ubuntu-latest
    needs: [sonarqube, snyk]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies and run tests
        run: |
          cd frontend
          npm install
          npm run test

  build-backend:
    runs-on: ubuntu-latest
    needs: [preparation, backend-unit-testing]
    if: github.ref == 'refs/heads/deploy'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          tags: |
            ${{ env.IMAGE_NAME }}-backend:latest
            ${{ env.IMAGE_NAME }}-backend:${{ needs.preparation.outputs.app_version }}
          outputs: type=docker,dest=/tmp/backend-image.tar
      
      - name: Upload Backend image artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-image
          path: /tmp/backend-image.tar

  build-frontend:
    runs-on: ubuntu-latest
    needs: [preparation, frontend-unit-testing]
    if: github.ref == 'refs/heads/deploy'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false
          tags: |
            ${{ env.IMAGE_NAME }}-frontend:latest
            ${{ env.IMAGE_NAME }}-frontend:${{ needs.preparation.outputs.app_version }}
          build-args: |
            VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}
            VITE_PUBLIC_POSTHOG_KEY=${{ secrets.VITE_PUBLIC_POSTHOG_KEY }}
            VITE_PUBLIC_POSTHOG_HOST=${{ secrets.VITE_PUBLIC_POSTHOG_HOST }}
          outputs: type=docker,dest=/tmp/frontend-image.tar
      
      - name: Upload Frontend image artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-image
          path: /tmp/frontend-image.tar

  delivery:
    runs-on: ubuntu-latest
    needs: [preparation, build-frontend, build-backend]
    if: github.ref == 'refs/heads/deploy'
    steps:
      - name: Download Frontend image artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-image
          path: /tmp
      
      - name: Download Backend image artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-image
          path: /tmp
      
      - name: Load Docker images
        run: |
          docker load --input /tmp/frontend-image.tar
          docker load --input /tmp/backend-image.tar
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Push Frontend Docker image
        run: |
          docker push ${{ env.IMAGE_NAME }}-frontend:latest
          docker push ${{ env.IMAGE_NAME }}-frontend:${{ needs.preparation.outputs.app_version }}
      
      - name: Push Backend Docker image
        run: |
          docker push ${{ env.IMAGE_NAME }}-backend:latest
          docker push ${{ env.IMAGE_NAME }}-backend:${{ needs.preparation.outputs.app_version }}

  deploy:
    runs-on: ubuntu-latest
    needs: [preparation, delivery]
    if: github.ref == 'refs/heads/deploy'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Add remote host to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts
      
      - name: Start blue-green deployment
        id: deploy_start
        run: |
          TESTS_PORT=$(ssh ${{ secrets.SSH_USER }}@${{ secrets.REMOTE_HOST }} "cd app && ./start-blue-green.sh")
          echo "tests_port=$TESTS_PORT" >> $GITHUB_OUTPUT
          echo "Tests will run on port: $TESTS_PORT"
      
      - name: Run E2E tests
        run: |
          cd frontend
          TESTS_URL='http://${{ secrets.REMOTE_HOST }}:${{ steps.deploy_start.outputs.tests_port }}' npm run e2e
      
      - name: Run performance tests
        run: |
          cd frontend
          TESTS_URL='http://${{ secrets.REMOTE_HOST }}:${{ steps.deploy_start.outputs.tests_port }}' npm run performance
      
      - name: Switch blue-green deployment
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.REMOTE_HOST }} "cd app && ./switch-blue-green.sh"